openapi: 3.0.3
info:
  title: "Metadata Server API"
  version: "0.4.0.0"
servers:
  - url: https://tokens.cardano.org/
    description: Production server (uses live data)
  - url: https://test.tokens.cardano.org/
    description: Test server (using live data but only read only)
tags:
  - name: v1 queries
    description: Query metadata v1 style
  - name: v2 queries
    description: Query metadata v2 style
x-tagGroups:
  - name: Metadata Server
    tags:
      - v1 queries
      - v2 queries
paths:
  /v2/health:
    get:
      summary: "health status of API"
      tags:
        - v2 queries
      operationId: "getHealth_v2"
      responses:
        200:
          description: "Returned if service is healthy."
        500:
          description: "Returned if service is not healthy."
  /metadata/{subject}:
    get:
      summary: "Query All Properties"
      tags:
        - v1 queries
      operationId: "getAllPropertiesForSubject"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: '`subject` not found'
          content: {}
  /metadata/{subject}/properties/{properties}:
    get:
      summary: "Query Specific Property"
      tags:
        - v1 queries
      operationId: "getPropertyForSubject"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
        - name: properties
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Property'
        404:
          description: '`subject` or `properties` not found'
          content: {}
  /metadata/query:
    post:
      tags:
        - v1 queries
      summary: "Batch Metadata Query"
      operationId: "getSubjects"
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/BatchRequest'
        required: true
      responses:
        200:
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/BatchResponse'
        400:
          description: Invalid `body`
          content: {}
      x-codegen-request-body-name: body
  /v2/subjects/{subject}:
    get:
      summary: "Query all properties or specified properties of the given subject"
      tags:
        - v2 queries
      operationId: "getSubject_v2"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: "The metadata related to the queried subject."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Property'
        204:
          description: "If the subject is present in the metadata server but has not data for the given fields list."
        404:
          description: 'If the subject is not present in the metadata server.'
    delete:
      summary: "Request deletion of the given metadata subject."
      tags:
        - v2 queries
      operationId: "deleteSubject_v2"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
        - name: signature
          in: query
          required: true
          description: "The hex string representation of the signature generated from the string 'VOID' using the signing/private key that has been used for metadata signing."
          schema:
            type: string
        - name: vkey
          in: query
          required: true
          description: "The hex string representation of the cbor encoded verification/public key that fits the signing/private key that has been used for signature creation."
          schema:
            type: string
      responses:
        200:
          description: "The metadata related to the queried subject."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Property'
        204:
          description: "If the subject is present in the metadata server but has not data for the given fields list."
        404:
          description: 'If the subject is not present in the metadata server.'
    post:
      tags:
        - v2 queries
      summary: "Post a new token metadata submission."
      operationId: "postSubject_v2"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: "Returns the complete metadata after a successfull request."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          description: "Returned if validation of the given metadata object failed."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/VerifyFailureResponse'
  /v2/subjects/{subject}/verify:
    post:
      tags:
        - v2 queries
      summary: "Verifies and validates the given metadata object."
      operationId: "verifySubject_v2"
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/Property'
        required: true
      responses:
        200:
          description: "Returned on successfull verification and validation."
        400:
          description: "Returns a list of errors found during the validation"
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/VerifyFailureResponse'
  /v2/subjects:
    get:
      summary: "Query all subjects that meet the filter criteria."
      tags:
        - v2 queries
      operationId: "getSubjects_v2"
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: name_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: ticker
          in: query
          required: false
          schema:
            type: string
        - name: ticker_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: description_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: url
          in: query
          required: false
          schema:
            type: string
        - name: url_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: policy
          in: query
          required: false
          schema:
            type: string
        - name: policy_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: updated
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: updated_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: updated_by
          in: query
          required: false
          schema:
            type: string
        - name: updatedby_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: decimals
          in: query
          required: false
          schema:
            type: integer
        - name: decimals_op
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterOperand'
        - name: q
          description: "Perform a fulltext search on the fields name, ticker, description, updated_by and url."
          in: query
          required: false
          schema:
            type: string
        - name: vkey
          description: "Retrieve entries that got signed by the key given identified by its hex CBOR representation of the public key part."
          in: query
          required: false
          schema:
            type: string
        - name: limit
          description: "Limits the size of the result set. Max `limit` entries will be returned."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 200
        - name: after_id
          description: "Used for pagination. Only records after the given pivot element will be returned."
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: "The metadata related to the queried subjects."
          headers:
            X-Total-Count:
              schema:
                type: integer
                minimum: 0
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/SubjectsResponse'
        204:
          description: "If no metadata has been found that matches the given filter criteria."
  /v2/forensics/wallet/{addresshash}:
    get:
      summary: "Check if there are any scam or other fraud incidents related to this SHA-256 wallet address hash."
      tags:
        - v2 queries
      operationId: "v2_forensics_wallet"
      parameters:
        - name: addresshash
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Detailed information about fraud incidents."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/WalletTrustCheckResponse'
        204:
          description: "If there are no fraud incidents related to this address hash."
        500:
          description: 'If anything internal went wrong.'
  /v2/forensics/wallet:
    post:
      summary: "Check if there are any scam or other fraud incidents related to the given SHA-256 wallet address hashes."
      tags:
        - v2 queries
      operationId: "v2_forensics_wallets"
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/WalletHashes'
        required: true
      responses:
        200:
          description: "Detailed information about fraud incidents related to the given address hashes."
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/WalletTrustCheckResponse'
        204:
          description: "If there are no fraud incidents related to the given address hashes."
        500:
          description: 'If anything internal went wrong.'
components:
  schemas:
    FilterOperand:
      type: string
      enum:
        - eq
        - neq
        - lt
        - lte
        - gt
        - gte
    NameProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: string
          minLength: 1
          maxLength: 50
    DescriptionProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: string
          maxLength: 500
    UrlProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: string
          maxLength: 250
          pattern: '^https://'
          example: "https://www.iohk.io"
    ToolProperty:
      type: object
      properties:
        url:
          type: string
          maxLength: 250
          pattern: '^https://'
          example: "https://www.iohk.io"
        description:
          type: string
          maxLength: 500
    TickerProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: string
          minLength: 2
          maxLength: 5
          example: "QUID"
    DecimalsProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: number
          minimum: 0
          maximum: 255
          example: 1
    LogoProperty:
      required:
        - signatures
        - sequenceNumber
        - value
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedSignature'
        sequenceNumber:
          type: number
          minimum: 0
        value:
          type: string
          format: byte
          example: ""
    AnnotatedSignature:
      required:
        - publicKey
        - signature
      type: object
      properties:
        signature:
          type: string
        publicKey:
          type: string
    BatchResponse:
      required:
        - subjects
      type: object
      properties:
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    BatchRequest:
      required:
        - subjects
      type: object
      properties:
        subjects:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            type: string
    SubjectsResponse:
      required:
        - subjects
      type: object
      properties:
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    VerifyFailureResponse:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    WalletHashes:
      required:
        - addressHashes
      type: object
      properties:
        addressHashes:
          type: array
          items:
            type: string
    WalletTrustCheckResponse:
      type: object
      required:
        - incidents
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/WalletFraudIncident'
    WalletFraudIncident:
      type: object
      required:
        - addressHash
        - incidentId
        - scamSiteDomain
        - reportedDate
      properties:
        addressHash:
          type: string
          example: "b377d03a568dde663534e040fc32a57323ec00970df0e863eba3f098717569640a"
        incidentId:
          type: integer
        scamSiteDomain:
          type: string
          example: "adagain.com"
        reportedDate:
          type: string
          format: date
    Property:
      type: object
      required:
        - subject
      properties:
        subject:
          type: string
          example: "b377d03a568dde663534e040fc32a57323ec00970df0e863eba3f098717569640a"
        policy:
          type: string
          example: "82008200581ce62601e8eeec975f3f124a288cd0ecb2973f5fc225629f1401a79b16"
        name:
          $ref: '#/components/schemas/NameProperty'
        description:
          $ref: '#/components/schemas/DescriptionProperty'
        url:
          $ref: '#/components/schemas/UrlProperty'
        ticker:
          $ref: '#/components/schemas/TickerProperty'
        decimals:
          $ref: '#/components/schemas/DecimalsProperty'
        logo:
          $ref: '#/components/schemas/LogoProperty'
        tool:
          $ref: '#/components/schemas/ToolProperty'